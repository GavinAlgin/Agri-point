Mobile Development
An Activity in Android represents a single screen with a user interface. It is a subclass of the Activity class and is a core component of an Android app.
A Layout in Android defines the structure of the user interface in an XML file. It tells the system how UI components are arranged on the screen.
An Intent is a messaging object used to request an action from another app component. It is how components (like Activities) communicate and navigate with each other.

Gradle is the build system used in Android development, and it plays a crucial role in compiling, packaging, and managing dependencies for Android applications.
Gradle is an automation tool that compiles Java/Kotlin code, runs tests, automates deployment, and manages dependencies.
Key Gradle Files
o	settings.gradle 
o	build.gradle
Version Management 
o	App Versioning 
o	Dependency Versioning
o	Gradle plugin Versioning
o	Dependency types (implementation, api, compileOnly, runtimeOnly, testImplementation)
The Android Application Lifecycle refers to the series of states an Android activity (a screen in the app) goes through — from being created to being destroyed.
    onCreate() --> onStart() --> onResume()
                                |
                           [Running]
                                |
                    onPause() --> onStop() --> onDestroy()

Layouts
// Stacked Vertically (side by side + LinearLayout)
<LinearLayout
    android:orientation="vertical"  <!-- or "horizontal" -->
    android:layout_width="match_parent"
    android:layout_height="wrap_content">

    <TextView android:text="Hello" />
    <Button android:text="Click Me" />
</LinearLayout>
// ConstraintLayout 
<androidx.constraintlayout.widget.ConstraintLayout ... >
    <Button
        android:id="@+id/button"
        android:text="Click"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"/>
</androidx.constraintlayout.widget.ConstraintLayout>
// RelativeLayout 
<RelativeLayout ...>
    <TextView android:id="@+id/text1" android:text="Hi" />
    <Button
        android:layout_below="@id/text1"
        android:text="Click Me" />
</RelativeLayout>

        // Declare the button on action eventlistener
mn.button);
        
        //create the event
        btn.onSetOnClickListener(new View.onClickListener()){
            public void OnClick(View v){
                String text = TextView.getText().toString();
textView.setText(“hello w”)
            }
        }
// MainActivity.java
package com.example.userapp;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.view.View;
import android.widget.*;
import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    EditText editName, editEmail, editAge;
    Button btnAdd;
    TextView textUsers;

    ArrayList<User> userList = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        editName = findViewById(R.id.editName);
        editEmail = findViewById(R.id.editEmail);
        editAge = findViewById(R.id.editAge);
        btnAdd = findViewById(R.id.btnAdd);
        textUsers = findViewById(R.id.textUsers);

        btnAdd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String name = editName.getText().toString();
                String email = editEmail.getText().toString();
                String ageStr = editAge.getText().toString();

                if (name.isEmpty() || email.isEmpty() || ageStr.isEmpty()) {
                    Toast.makeText(MainActivity.this, "Please fill all fields", Toast.LENGTH_SHORT).show();
                    return;
                }

                int age = Integer.parseInt(ageStr);
                User user = new User(name, email, age);
                userList.add(user);

                updateUserList();

                // Clear fields
                editName.setText("");
                editEmail.setText("");
                editAge.setText("");
            }
        });
    }

    private void showAlert(String title, String message) {
        new AlertDialog.Builder(MainActivity.this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("OK", null)
                .show();
    }
    private void showStatistics() {
        if (userList.isEmpty()) {
            showAlert("Stats", "No users added yet.");
            return;
        }

        int totalAge = 0;
        int minAge = Integer.MAX_VALUE;
        int maxAge = Integer.MIN_VALUE;

        for (User user : userList) {
            int age = user.getAge();
            totalAge += age;

            if (age < minAge) minAge = age;
            if (age > maxAge) maxAge = age;
        }

        double avgAge = (double) totalAge / userList.size();

        String stats = "Total Users: " + userList.size() +
                       "\nAverage Age: " + String.format("%.2f", avgAge) +
                       "\nYoungest Age: " + minAge +
                       "\nOldest Age: " + maxAge;

        showAlert("User Statistics", stats);
    }

    private void updateUserList() {
        StringBuilder builder = new StringBuilder();
        for (User user : userList) {
            builder.append(user.toString()).append("\n");
        }
        textUsers.setText(builder.toString());
    }
}
// Database
// Student.java
import androidx.room.Entity;
import androidx.room.PrimaryKey;

@Entity
public class Student {
    @PrimaryKey(autoGenerate = true)
    public int id;

    public String name;
    public int age;

    // Constructor
    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

// StudentDao.java
import androidx.room.Dao;
import androidx.room.Insert;
import androidx.room.Query;

import java.util.List;

@Dao
public interface StudentDao {

    @Insert
    void insert(Student student);

    @Query("SELECT * FROM Student")
    List<Student> getAllStudents();
}

// AppDatabase.java
import androidx.room.Database;
import androidx.room.Room;
import androidx.room.RoomDatabase;
import android.content.Context;

@Database(entities = {Student.class}, version = 1)
public abstract class AppDatabase extends RoomDatabase {

    private static AppDatabase INSTANCE;

    public abstract StudentDao studentDao();

    public static synchronized AppDatabase getInstance(Context context) {
        if (INSTANCE == null) {
            INSTANCE = Room.databaseBuilder(context.getApplicationContext(),
                    AppDatabase.class, "student_db")
                    .fallbackToDestructiveMigration()
                    .build();
        }
        return INSTANCE;
    }
}
// MainActivity.java
import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import android.os.AsyncTask;
import android.util.Log;

import java.util.List;

public class MainActivity extends AppCompatActivity {

    AppDatabase db;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        db = AppDatabase.getInstance(this);

        // Insert a student
        new InsertStudentTask().execute(new Student("Alice", 20));

        // Fetch and print students
        new GetStudentsTask().execute();
    }

    // AsyncTask for inserting
    private class InsertStudentTask extends AsyncTask<Student, Void, Void> {
        @Override
        protected Void doInBackground(Student... students) {
            db.studentDao().insert(students[0]);
            return null;
        }
    }

    // AsyncTask for getting all students
    private class GetStudentsTask extends AsyncTask<Void, Void, List<Student>> {
        @Override
        protected List<Student> doInBackground(Void... voids) {
            return db.studentDao().getAllStudents();
        }

        @Override
        protected void onPostExecute(List<Student> students) {
            for (Student s : students) {
                Log.d("STUDENT", s.name + " - Age: " + s.age);
            }
        }
    }
}
